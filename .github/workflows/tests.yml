name: UPID CLI Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Unit Tests (Fast)
  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10, 3.11]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run unit tests
      run: |
        python tests/run_tests.py --unit
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/unit.xml
        flags: unit
        name: unit-tests-${{ matrix.python-version }}

  # Code Quality Checks
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run linting
      run: |
        python tests/run_tests.py --lint
    
    - name: Run type checking
      run: |
        python tests/run_tests.py --type-check
    
    - name: Run formatting check
      run: |
        python tests/run_tests.py --format
    
    - name: Run security checks
      run: |
        python tests/run_tests.py --security

  # Integration Tests (Slow)
  integration-tests:
    runs-on: ubuntu-latest
    needs: [unit-tests, code-quality]
    
    services:
      docker:
        image: docker:20.10.16
        options: --user root
        ports:
          - 2376:2376
        env:
          DOCKER_TLS_CERTDIR: /certs
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run API integration tests
      run: |
        python tests/run_tests.py --api
      timeout-minutes: 10
    
    - name: Upload API test coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/integration.xml
        flags: integration-api
        name: integration-api-tests

  # Kubernetes Integration Tests
  k8s-tests:
    runs-on: ubuntu-latest
    needs: [unit-tests, code-quality]
    
    services:
      docker:
        image: docker:20.10.16
        options: --user root
        ports:
          - 2376:2376
        env:
          DOCKER_TLS_CERTDIR: /certs
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run Kubernetes integration tests
      run: |
        python tests/run_tests.py --k8s
      timeout-minutes: 15
    
    - name: Upload K8s test coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/integration.xml
        flags: integration-k8s
        name: integration-k8s-tests

  # Performance Tests
  performance-tests:
    runs-on: ubuntu-latest
    needs: [unit-tests, code-quality]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run performance tests
      run: |
        python tests/run_tests.py --performance
      timeout-minutes: 10

  # Build and Package
  build:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, k8s-tests, performance-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  # Test Report
  test-report:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, k8s-tests, performance-tests]
    if: always()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Generate test report
      run: |
        python tests/run_tests.py --report
    
    - name: Upload test report
      uses: actions/upload-artifact@v3
      with:
        name: test-report
        path: |
          htmlcov/
          coverage/
          reports/
        retention-days: 30

  # Security Scan
  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run security scan
      run: |
        python tests/run_tests.py --security
    
    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: security_report.json
        retention-days: 90

  # Documentation
  docs:
    runs-on: ubuntu-latest
    needs: [unit-tests, code-quality]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Generate documentation
      run: |
        make docs
    
    - name: Upload documentation
      uses: actions/upload-artifact@v3
      with:
        name: docs
        path: docs/
        retention-days: 30

  # Dependency Check
  dependency-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Check for outdated dependencies
      run: |
        pip install pipdeptree safety
        pipdeptree --warn silence
        safety check --json --output safety-report.json
    
    - name: Upload safety report
      uses: actions/upload-artifact@v3
      with:
        name: safety-report
        path: safety-report.json
        retention-days: 30

  # Final Status
  status:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, k8s-tests, performance-tests, code-quality, security]
    if: always()
    
    steps:
    - name: Check test status
      run: |
        echo "Test Status Summary:"
        echo "Unit Tests: ${{ needs.unit-tests.result }}"
        echo "Integration Tests: ${{ needs.integration-tests.result }}"
        echo "K8s Tests: ${{ needs.k8s-tests.result }}"
        echo "Performance Tests: ${{ needs.performance-tests.result }}"
        echo "Code Quality: ${{ needs.code-quality.result }}"
        echo "Security: ${{ needs.security.result }}"
        
        if [[ "${{ needs.unit-tests.result }}" == "failure" ]] || \
           [[ "${{ needs.integration-tests.result }}" == "failure" ]] || \
           [[ "${{ needs.k8s-tests.result }}" == "failure" ]] || \
           [[ "${{ needs.code-quality.result }}" == "failure" ]]; then
          echo "❌ Some tests failed!"
          exit 1
        else
          echo "✅ All critical tests passed!"
        fi 