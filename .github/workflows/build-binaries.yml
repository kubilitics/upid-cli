name: Build and Release Go Binaries

on:
  release:
    types: [published]
  workflow_dispatch:  # Allow manual triggering

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            artifact: upid-linux-amd64
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
            artifact: upid-linux-arm64
          - os: macos-latest
            goos: darwin
            goarch: amd64
            artifact: upid-darwin-amd64
          - os: macos-latest
            goos: darwin
            goarch: arm64
            artifact: upid-darwin-arm64
          - os: windows-latest
            goos: windows
            goarch: amd64
            artifact: upid-windows-amd64.exe
          - os: windows-latest
            goos: windows
            goarch: arm64
            artifact: upid-windows-arm64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Get version info
        id: version
        run: |
          VERSION=$(grep 'version: str =' upid_config.py | cut -d'"' -f2)
          COMMIT=$(git rev-parse --short HEAD)
          DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "commit=$COMMIT" >> $GITHUB_OUTPUT
          echo "date=$DATE" >> $GITHUB_OUTPUT

      - name: Build Go binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          LDFLAGS="-X main.commit=${{ steps.version.outputs.commit }} -X main.date=${{ steps.version.outputs.date }} -s -w"
          go build -ldflags "$LDFLAGS" -o "dist/${{ matrix.artifact }}" ./cmd/upid

      - name: Test binary
        run: |
          if [ "${{ matrix.goos }}" = "windows" ]; then
            ./dist/${{ matrix.artifact }} --version
          else
            chmod +x ./dist/${{ matrix.artifact }}
            ./dist/${{ matrix.artifact }} --version
          fi

      - name: Create package directory
        run: |
          mkdir -p "dist/upid-${{ steps.version.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}"
          cp "dist/${{ matrix.artifact }}" "dist/upid-${{ steps.version.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}/upid"
          if [ "${{ matrix.goos }}" != "windows" ]; then
            chmod +x "dist/upid-${{ steps.version.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}/upid"
          fi

      - name: Copy documentation and install scripts
        run: |
          if [ -f "install/install.sh" ]; then
            cp "install/install.sh" "dist/upid-${{ steps.version.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}/"
            chmod +x "dist/upid-${{ steps.version.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}/install.sh"
          fi
          
          if [ -f "docs/guides/UPID_USER_MANUAL.md" ]; then
            cp "docs/guides/UPID_USER_MANUAL.md" "dist/upid-${{ steps.version.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}/"
          fi
          
          if [ -f "docs/guides/UPID_QUICK_REFERENCE.md" ]; then
            cp "docs/guides/UPID_QUICK_REFERENCE.md" "dist/upid-${{ steps.version.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}/"
          fi
          
          if [ -f "docs/guides/UPID_INSTALLATION_GUIDE.md" ]; then
            cp "docs/guides/UPID_INSTALLATION_GUIDE.md" "dist/upid-${{ steps.version.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}/"
          fi

      - name: Create tar.gz package
        run: |
          cd dist
          tar -czf "upid-${{ steps.version.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz" "upid-${{ steps.version.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}"
          cd ..

      - name: Upload binary to release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/${{ matrix.artifact }}
            dist/upid-${{ steps.version.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Additional job to create a combined release summary
  create-release-summary:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create release summary
        run: |
          VERSION=$(grep 'version: str =' upid_config.py | cut -d'"' -f2)
          COMMIT=$(git rev-parse --short HEAD)
          DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          
          cat > "RELEASE_SUMMARY.md" << EOF
          # UPID CLI v$VERSION Release Summary
          
          ## Build Information
          - **Version**: $VERSION
          - **Commit**: $COMMIT
          - **Build Date**: $DATE
          
          ## Binaries Built
          - upid-linux-amd64
          - upid-linux-arm64
          - upid-darwin-amd64
          - upid-darwin-arm64
          - upid-windows-amd64.exe
          - upid-windows-arm64.exe
          
          ## Packages Created
          - upid-$VERSION-linux-amd64.tar.gz
          - upid-$VERSION-linux-arm64.tar.gz
          - upid-$VERSION-darwin-amd64.tar.gz
          - upid-$VERSION-darwin-arm64.tar.gz
          - upid-$VERSION-windows-amd64.tar.gz
          - upid-$VERSION-windows-arm64.tar.gz
          
          ## Installation
          \`\`\`bash
          # Download and extract
          tar -xzf upid-$VERSION-\$(uname -s | tr '[:upper:]' '[:lower:]')-\$(uname -m).tar.gz
          
          # Install
          ./install.sh
          \`\`\`
          
          ## Features
          - Complete Phase 7 Advanced Features (ML Integration, Enterprise Security, Advanced Analytics)
          - All 14 tests passing with comprehensive coverage
          - Production-ready enterprise Kubernetes cost optimization platform
          - Real implementation with no mock data
          - Enterprise security with MFA, SSO, threat detection, compliance
          - Advanced analytics with predictive analytics, BI, visualization
          - Multi-cloud support for AWS, Azure, GCP
          - Complete audit logging and compliance features
          EOF

      - name: Upload release summary
        uses: softprops/action-gh-release@v2
        with:
          files: RELEASE_SUMMARY.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 