"""Initial database schema with all UPID tables

Revision ID: 514341736050
Revises: 
Create Date: 2025-07-25 11:29:49.983119

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '514341736050'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('system_configuration',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('key', sa.String(length=100), nullable=False),
    sa.Column('value', sa.JSON(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('category', sa.String(length=50), nullable=True),
    sa.Column('value_type', sa.String(length=20), nullable=True),
    sa.Column('allowed_values', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_config_category', 'system_configuration', ['category'], unique=False)
    op.create_index(op.f('ix_system_configuration_key'), 'system_configuration', ['key'], unique=True)
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('username', sa.String(length=50), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('hashed_password', sa.String(length=255), nullable=False),
    sa.Column('full_name', sa.String(length=255), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_superuser', sa.Boolean(), nullable=False),
    sa.Column('role', sa.Enum('ADMIN', 'USER', 'VIEWER', name='userrole'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('last_login', sa.DateTime(timezone=True), nullable=True),
    sa.Column('preferences', sa.JSON(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('clusters',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('endpoint', sa.String(length=500), nullable=True),
    sa.Column('kubeconfig', sa.Text(), nullable=True),
    sa.Column('cloud_provider', sa.Enum('AWS', 'GCP', 'AZURE', 'ON_PREMISE', name='cloudprovider'), nullable=True),
    sa.Column('region', sa.String(length=50), nullable=True),
    sa.Column('kubernetes_version', sa.String(length=20), nullable=True),
    sa.Column('node_count', sa.Integer(), nullable=True),
    sa.Column('namespace_count', sa.Integer(), nullable=True),
    sa.Column('pod_count', sa.Integer(), nullable=True),
    sa.Column('status', sa.Enum('HEALTHY', 'WARNING', 'ERROR', 'CONNECTING', 'DISABLED', name='clusterstatus'), nullable=False),
    sa.Column('health_score', sa.Float(), nullable=True),
    sa.Column('efficiency_score', sa.Float(), nullable=True),
    sa.Column('monthly_cost', sa.Float(), nullable=True),
    sa.Column('projected_monthly_cost', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('last_seen', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('last_analysis', sa.DateTime(timezone=True), nullable=True),
    sa.Column('tags', sa.JSON(), nullable=True),
    sa.Column('configuration', sa.JSON(), nullable=True),
    sa.Column('owner_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('owner_id', 'name', name='uq_cluster_owner_name')
    )
    op.create_index('idx_cluster_cloud_provider', 'clusters', ['cloud_provider'], unique=False)
    op.create_index('idx_cluster_owner_name', 'clusters', ['owner_id', 'name'], unique=False)
    op.create_index('idx_cluster_status', 'clusters', ['status'], unique=False)
    op.create_index(op.f('ix_clusters_name'), 'clusters', ['name'], unique=False)
    op.create_table('audit_logs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('cluster_id', sa.UUID(), nullable=True),
    sa.Column('action', sa.String(length=100), nullable=False),
    sa.Column('resource_type', sa.String(length=100), nullable=True),
    sa.Column('resource_id', sa.UUID(), nullable=True),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.String(length=500), nullable=True),
    sa.Column('request_id', sa.String(length=100), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('details', sa.JSON(), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('timestamp', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['cluster_id'], ['clusters.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_audit_action', 'audit_logs', ['action'], unique=False)
    op.create_index('idx_audit_cluster_time', 'audit_logs', ['cluster_id', 'timestamp'], unique=False)
    op.create_index('idx_audit_timestamp', 'audit_logs', ['timestamp'], unique=False)
    op.create_index('idx_audit_user_time', 'audit_logs', ['user_id', 'timestamp'], unique=False)
    op.create_table('cluster_metrics',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('cluster_id', sa.UUID(), nullable=False),
    sa.Column('timestamp', sa.DateTime(timezone=True), nullable=False),
    sa.Column('cpu_usage_cores', sa.Float(), nullable=True),
    sa.Column('cpu_usage_percent', sa.Float(), nullable=True),
    sa.Column('memory_usage_bytes', sa.Integer(), nullable=True),
    sa.Column('memory_usage_percent', sa.Float(), nullable=True),
    sa.Column('network_rx_bytes', sa.Integer(), nullable=True),
    sa.Column('network_tx_bytes', sa.Integer(), nullable=True),
    sa.Column('storage_usage_bytes', sa.Integer(), nullable=True),
    sa.Column('storage_available_bytes', sa.Integer(), nullable=True),
    sa.Column('node_count', sa.Integer(), nullable=True),
    sa.Column('pod_count', sa.Integer(), nullable=True),
    sa.Column('namespace_count', sa.Integer(), nullable=True),
    sa.Column('hourly_cost', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['cluster_id'], ['clusters.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_cluster_metrics_time', 'cluster_metrics', ['cluster_id', 'timestamp'], unique=False)
    op.create_index('idx_cluster_metrics_timestamp', 'cluster_metrics', ['timestamp'], unique=False)
    op.create_index(op.f('ix_cluster_metrics_timestamp'), 'cluster_metrics', ['timestamp'], unique=False)
    op.create_table('optimization_runs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('cluster_id', sa.UUID(), nullable=False),
    sa.Column('created_by_id', sa.UUID(), nullable=False),
    sa.Column('optimization_type', sa.Enum('ZERO_POD_SCALING', 'RESOURCE_OPTIMIZATION', 'COST_OPTIMIZATION', 'SCALING', name='optimizationtype'), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'RUNNING', 'COMPLETED', 'FAILED', 'ROLLED_BACK', name='optimizationstatus'), nullable=False),
    sa.Column('target_namespace', sa.String(length=253), nullable=True),
    sa.Column('dry_run', sa.Boolean(), nullable=False),
    sa.Column('safety_checks_enabled', sa.Boolean(), nullable=False),
    sa.Column('actions_planned', sa.Integer(), nullable=True),
    sa.Column('actions_executed', sa.Integer(), nullable=True),
    sa.Column('actions_successful', sa.Integer(), nullable=True),
    sa.Column('actions_failed', sa.Integer(), nullable=True),
    sa.Column('estimated_monthly_savings', sa.Float(), nullable=True),
    sa.Column('actual_monthly_savings', sa.Float(), nullable=True),
    sa.Column('rollback_available', sa.Boolean(), nullable=True),
    sa.Column('rollback_expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('rollback_data', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('configuration', sa.JSON(), nullable=True),
    sa.Column('execution_log', sa.Text(), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['cluster_id'], ['clusters.id'], ),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_optimization_cluster_type', 'optimization_runs', ['cluster_id', 'optimization_type'], unique=False)
    op.create_index('idx_optimization_created', 'optimization_runs', ['created_at'], unique=False)
    op.create_index('idx_optimization_status', 'optimization_runs', ['status'], unique=False)
    op.create_table('reports',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('cluster_id', sa.UUID(), nullable=False),
    sa.Column('created_by_id', sa.UUID(), nullable=False),
    sa.Column('report_type', sa.String(length=100), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('time_range_start', sa.DateTime(timezone=True), nullable=False),
    sa.Column('time_range_end', sa.DateTime(timezone=True), nullable=False),
    sa.Column('report_data', sa.JSON(), nullable=False),
    sa.Column('summary_metrics', sa.JSON(), nullable=True),
    sa.Column('configuration', sa.JSON(), nullable=True),
    sa.Column('format', sa.String(length=20), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=True),
    sa.Column('file_path', sa.String(length=500), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['cluster_id'], ['clusters.id'], ),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_report_cluster_type', 'reports', ['cluster_id', 'report_type'], unique=False)
    op.create_index('idx_report_created', 'reports', ['created_at'], unique=False)
    op.create_index('idx_report_expires', 'reports', ['expires_at'], unique=False)
    op.create_table('workloads',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('cluster_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=253), nullable=False),
    sa.Column('namespace', sa.String(length=253), nullable=False),
    sa.Column('workload_type', sa.String(length=50), nullable=False),
    sa.Column('status', sa.String(length=50), nullable=True),
    sa.Column('replicas', sa.Integer(), nullable=True),
    sa.Column('ready_replicas', sa.Integer(), nullable=True),
    sa.Column('cpu_request', sa.String(length=20), nullable=True),
    sa.Column('cpu_limit', sa.String(length=20), nullable=True),
    sa.Column('memory_request', sa.String(length=20), nullable=True),
    sa.Column('memory_limit', sa.String(length=20), nullable=True),
    sa.Column('labels', sa.JSON(), nullable=True),
    sa.Column('annotations', sa.JSON(), nullable=True),
    sa.Column('is_idle', sa.Boolean(), nullable=True),
    sa.Column('idle_confidence', sa.Float(), nullable=True),
    sa.Column('last_traffic_seen', sa.DateTime(timezone=True), nullable=True),
    sa.Column('health_check_filtered', sa.Boolean(), nullable=True),
    sa.Column('estimated_monthly_cost', sa.Float(), nullable=True),
    sa.Column('potential_monthly_savings', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('last_analyzed', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['cluster_id'], ['clusters.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('cluster_id', 'namespace', 'name', name='uq_workload_cluster_ns_name')
    )
    op.create_index('idx_workload_cluster_namespace', 'workloads', ['cluster_id', 'namespace'], unique=False)
    op.create_index('idx_workload_idle', 'workloads', ['is_idle'], unique=False)
    op.create_index('idx_workload_name', 'workloads', ['name'], unique=False)
    op.create_table('optimization_actions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('optimization_run_id', sa.UUID(), nullable=False),
    sa.Column('workload_id', sa.UUID(), nullable=False),
    sa.Column('action_type', sa.String(length=100), nullable=False),
    sa.Column('target_resource', sa.String(length=500), nullable=False),
    sa.Column('original_configuration', sa.JSON(), nullable=True),
    sa.Column('target_configuration', sa.JSON(), nullable=True),
    sa.Column('applied_configuration', sa.JSON(), nullable=True),
    sa.Column('execution_order', sa.Integer(), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=True),
    sa.Column('estimated_savings', sa.Float(), nullable=True),
    sa.Column('risk_level', sa.String(length=20), nullable=True),
    sa.Column('rollback_configuration', sa.JSON(), nullable=True),
    sa.Column('rollback_successful', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('executed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('execution_log', sa.Text(), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['optimization_run_id'], ['optimization_runs.id'], ),
    sa.ForeignKeyConstraint(['workload_id'], ['workloads.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_action_run_order', 'optimization_actions', ['optimization_run_id', 'execution_order'], unique=False)
    op.create_index('idx_action_status', 'optimization_actions', ['status'], unique=False)
    op.create_index('idx_action_workload', 'optimization_actions', ['workload_id'], unique=False)
    op.create_table('workload_metrics',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('workload_id', sa.UUID(), nullable=False),
    sa.Column('timestamp', sa.DateTime(timezone=True), nullable=False),
    sa.Column('cpu_usage_cores', sa.Float(), nullable=True),
    sa.Column('cpu_usage_percent', sa.Float(), nullable=True),
    sa.Column('memory_usage_bytes', sa.Integer(), nullable=True),
    sa.Column('memory_usage_percent', sa.Float(), nullable=True),
    sa.Column('network_rx_bytes', sa.Integer(), nullable=True),
    sa.Column('network_tx_bytes', sa.Integer(), nullable=True),
    sa.Column('request_count', sa.Integer(), nullable=True),
    sa.Column('health_check_requests', sa.Integer(), nullable=True),
    sa.Column('business_requests', sa.Integer(), nullable=True),
    sa.Column('avg_response_time_ms', sa.Float(), nullable=True),
    sa.Column('p95_response_time_ms', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['workload_id'], ['workloads.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_workload_metrics_time', 'workload_metrics', ['workload_id', 'timestamp'], unique=False)
    op.create_index('idx_workload_metrics_timestamp', 'workload_metrics', ['timestamp'], unique=False)
    op.create_index(op.f('ix_workload_metrics_timestamp'), 'workload_metrics', ['timestamp'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_workload_metrics_timestamp'), table_name='workload_metrics')
    op.drop_index('idx_workload_metrics_timestamp', table_name='workload_metrics')
    op.drop_index('idx_workload_metrics_time', table_name='workload_metrics')
    op.drop_table('workload_metrics')
    op.drop_index('idx_action_workload', table_name='optimization_actions')
    op.drop_index('idx_action_status', table_name='optimization_actions')
    op.drop_index('idx_action_run_order', table_name='optimization_actions')
    op.drop_table('optimization_actions')
    op.drop_index('idx_workload_name', table_name='workloads')
    op.drop_index('idx_workload_idle', table_name='workloads')
    op.drop_index('idx_workload_cluster_namespace', table_name='workloads')
    op.drop_table('workloads')
    op.drop_index('idx_report_expires', table_name='reports')
    op.drop_index('idx_report_created', table_name='reports')
    op.drop_index('idx_report_cluster_type', table_name='reports')
    op.drop_table('reports')
    op.drop_index('idx_optimization_status', table_name='optimization_runs')
    op.drop_index('idx_optimization_created', table_name='optimization_runs')
    op.drop_index('idx_optimization_cluster_type', table_name='optimization_runs')
    op.drop_table('optimization_runs')
    op.drop_index(op.f('ix_cluster_metrics_timestamp'), table_name='cluster_metrics')
    op.drop_index('idx_cluster_metrics_timestamp', table_name='cluster_metrics')
    op.drop_index('idx_cluster_metrics_time', table_name='cluster_metrics')
    op.drop_table('cluster_metrics')
    op.drop_index('idx_audit_user_time', table_name='audit_logs')
    op.drop_index('idx_audit_timestamp', table_name='audit_logs')
    op.drop_index('idx_audit_cluster_time', table_name='audit_logs')
    op.drop_index('idx_audit_action', table_name='audit_logs')
    op.drop_table('audit_logs')
    op.drop_index(op.f('ix_clusters_name'), table_name='clusters')
    op.drop_index('idx_cluster_status', table_name='clusters')
    op.drop_index('idx_cluster_owner_name', table_name='clusters')
    op.drop_index('idx_cluster_cloud_provider', table_name='clusters')
    op.drop_table('clusters')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_system_configuration_key'), table_name='system_configuration')
    op.drop_index('idx_config_category', table_name='system_configuration')
    op.drop_table('system_configuration')
    # ### end Alembic commands ###
