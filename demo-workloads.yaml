---
# Test workloads for UPID demonstration
apiVersion: v1
kind: Namespace
metadata:
  name: upid-demo
---
# High CPU workload (should be detected as active)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cpu-intensive-app
  namespace: upid-demo
  labels:
    app: cpu-intensive
    tier: compute
spec:
  replicas: 2
  selector:
    matchLabels:
      app: cpu-intensive
  template:
    metadata:
      labels:
        app: cpu-intensive
        tier: compute
    spec:
      containers:
      - name: cpu-stress
        image: polinux/stress
        command: ["stress"]
        args: ["--cpu", "1", "--timeout", "3600s"]
        resources:
          requests:
            cpu: 100m
            memory: 64Mi
          limits:
            cpu: 500m
            memory: 128Mi
---
# Idle workload (minimal activity - should be detected as idle)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: idle-webapp
  namespace: upid-demo
  labels:
    app: idle-webapp
    tier: web
spec:
  replicas: 3
  selector:
    matchLabels:
      app: idle-webapp
  template:
    metadata:
      labels:
        app: idle-webapp
        tier: web
    spec:
      containers:
      - name: nginx
        image: nginx:alpine
        ports:
        - containerPort: 80
        resources:
          requests:
            cpu: 10m
            memory: 32Mi
          limits:
            cpu: 100m
            memory: 64Mi
---
# Over-provisioned workload (should trigger rightsizing recommendations)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: over-provisioned-api
  namespace: upid-demo
  labels:
    app: over-provisioned-api
    tier: api
spec:
  replicas: 4
  selector:
    matchLabels:
      app: over-provisioned-api
  template:
    metadata:
      labels:
        app: over-provisioned-api
        tier: api
    spec:
      containers:
      - name: python-api
        image: python:3.9-slim
        command: ["python", "-c"]
        args: ["import time; import os; print(f'API Server started on {os.environ.get(\"HOSTNAME\", \"unknown\")}'); [time.sleep(30) for _ in iter(int, 1)]"]
        ports:
        - containerPort: 8000
        resources:
          requests:
            cpu: 1000m    # Over-provisioned
            memory: 1Gi   # Over-provisioned
          limits:
            cpu: 2000m
            memory: 2Gi
        env:
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
---
# Zero-downtime candidate (perfect for zero-pod scaling)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: batch-processor
  namespace: upid-demo
  labels:
    app: batch-processor
    tier: batch
    upid.io/zero-pod-candidate: "true"
spec:
  replicas: 2
  selector:
    matchLabels:
      app: batch-processor
  template:
    metadata:
      labels:
        app: batch-processor
        tier: batch
    spec:
      containers:
      - name: batch-worker
        image: busybox
        command: ["sh", "-c"]
        args: ["echo 'Batch job starting...'; sleep 300; echo 'Batch job completed'; sleep 3600"]
        resources:
          requests:
            cpu: 50m
            memory: 32Mi
          limits:
            cpu: 200m
            memory: 128Mi
---
# Service for load testing
apiVersion: v1
kind: Service
metadata:
  name: idle-webapp-service
  namespace: upid-demo
spec:
  selector:
    app: idle-webapp
  ports:
  - port: 80
    targetPort: 80
  type: ClusterIP
---
# HPA for scaling demo
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: cpu-intensive-hpa
  namespace: upid-demo
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: cpu-intensive-app
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70