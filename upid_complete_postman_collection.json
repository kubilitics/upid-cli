					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"cluster_id\": \"{{test_cluster_id}}\",\n  \"time_period\": \"30d\",\n  \"cost_model\": \"aws\",\n  \"include_projections\": true,\n  \"breakdown_by\": [\"namespace\", \"resource_type\", \"application\"],\n  \"currency\": \"USD\",\n  \"include_optimization_opportunities\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/business/cost/calculate",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"business",
								"cost",
								"calculate"
							]
						},
						"description": "Calculate detailed cost analysis for cluster"
					}
				},
				{
					"name": "Calculate ROI",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('‚úÖ ROI calculation completed', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('‚úÖ ROI metrics exist', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.roi_percentage).to.exist;",
									"    pm.expect(jsonData.payback_period).to.exist;",
									"    pm.expect(jsonData.total_savings).to.exist;",
									"    console.log('üìà ROI percentage:', jsonData.roi_percentage + '%');",
									"    console.log('‚è∞ Payback period:', jsonData.payback_period);",
									"    console.log('üí∞ Total savings:', jsonData.total_savings);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"investment_cost\": 50000,\n  \"time_period\": \"12m\",\n  \"cost_savings\": [\n    {\"month\": 1, \"savings\": 5000},\n    {\"month\": 2, \"savings\": 7500},\n    {\"month\": 3, \"savings\": 10000},\n    {\"month\": 4, \"savings\": 12000},\n    {\"month\": 5, \"savings\": 12500},\n    {\"month\": 6, \"savings\": 13000}\n  ],\n  \"operational_costs\": 2000,\n  \"discount_rate\": 0.05\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/business/roi/calculate",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"business",
								"roi",
								"calculate"
							]
						},
						"description": "Calculate return on investment for optimization initiatives"
					}
				},
				{
					"name": "Get Performance KPIs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('‚úÖ Performance KPIs retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('‚úÖ KPIs data exists', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.kpis).to.be.an('array');",
									"    pm.expect(jsonData.summary).to.exist;",
									"    console.log(`üìä Retrieved ${jsonData.kpis.length} KPIs`);",
									"    ",
									"    // Log top KPIs",
									"    jsonData.kpis.slice(0, 3).forEach((kpi, i) => {",
									"        console.log(`  KPI ${i+1}: ${kpi.name} = ${kpi.value} ${kpi.unit || ''}`);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/business/performance/kpis?cluster_id={{test_cluster_id}}&time_range=30d&include_trends=true",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"business",
								"performance",
								"kpis"
							],
							"query": [
								{
									"key": "cluster_id",
									"value": "{{test_cluster_id}}"
								},
								{
									"key": "time_range",
									"value": "30d"
								},
								{
									"key": "include_trends",
									"value": "true"
								}
							]
						},
						"description": "Get key performance indicators for business analysis"
					}
				},
				{
					"name": "Generate Business Report",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('‚úÖ Report generation started', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('‚úÖ Report ID returned', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.report_id).to.exist;",
									"    pm.environment.set('report_id', jsonData.report_id);",
									"    console.log('üìã Business report generation started with ID:', jsonData.report_id);",
									"    console.log('üìã Report status:', jsonData.status);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"report_type\": \"cost_optimization\",\n  \"cluster_id\": \"{{test_cluster_id}}\",\n  \"time_period\": \"30d\",\n  \"format\": \"pdf\",\n  \"sections\": [\n    \"executive_summary\",\n    \"cost_analysis\",\n    \"optimization_recommendations\",\n    \"roi_analysis\",\n    \"performance_metrics\"\n  ],\n  \"include_charts\": true,\n  \"delivery_method\": \"download\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/business/reports",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"business",
								"reports"
							]
						},
						"description": "Generate comprehensive business report"
					}
				},
				{
					"name": "Get Executive Dashboard",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('‚úÖ Executive dashboard retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('‚úÖ Dashboard data exists', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.widgets).to.be.an('array');",
									"    pm.expect(jsonData.summary_metrics).to.exist;",
									"    console.log(`üìä Executive dashboard loaded with ${jsonData.widgets.length} widgets`);",
									"    ",
									"    if (jsonData.summary_metrics) {",
									"        console.log('üìà Summary metrics:', Object.keys(jsonData.summary_metrics).join(', '));",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/business/dashboards/executive?time_range=30d&include_forecasts=true",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"business",
								"dashboards",
								"executive"
							],
							"query": [
								{
									"key": "time_range",
									"value": "30d"
								},
								{
									"key": "include_forecasts",
									"value": "true"
								}
							]
						},
						"description": "Get executive dashboard data"
					}
				}
			]
		},
		{
			"name": "‚öôÔ∏è Configuration Management",
			"description": "System and optimization configuration",
			"item": [
				{
					"name": "Get System Configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('‚úÖ System configuration retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('‚úÖ Configuration data exists', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.configuration).to.exist;",
									"    pm.expect(jsonData.version).to.exist;",
									"    console.log('‚öôÔ∏è  System configuration version:', jsonData.version);",
									"    ",
									"    if (jsonData.configuration) {",
									"        console.log('‚öôÔ∏è  Configuration sections:', Object.keys(jsonData.configuration).join(', '));",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/config/system",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"config",
								"system"
							]
						},
						"description": "Get current system configuration"
					}
				},
				{
					"name": "Update System Configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('‚úÖ System configuration updated', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('‚úÖ Update confirmation received', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.equal('updated');",
									"    console.log('‚öôÔ∏è  Configuration update status:', jsonData.status);",
									"    ",
									"    if (jsonData.changes_applied) {",
									"        console.log('‚úÖ Changes applied:', jsonData.changes_applied.length);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"metrics_collection_interval\": 30,\n  \"optimization_frequency\": \"daily\",\n  \"safety_validation_level\": \"strict\",\n  \"auto_rollback_enabled\": true,\n  \"performance_thresholds\": {\n    \"cpu_warning\": 80,\n    \"cpu_critical\": 95,\n    \"memory_warning\": 85,\n    \"memory_critical\": 95\n  },\n  \"notification_channels\": {\n    \"slack\": \"#ops-alerts\",\n    \"email\": \"ops-team@company.com\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/config/system",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"config",
								"system"
							]
						},
						"description": "Update system configuration settings"
					}
				},
				{
					"name": "Create Optimization Strategy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('‚úÖ Optimization strategy created', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('‚úÖ Strategy ID returned', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.strategy_id).to.exist;",
									"    pm.environment.set('strategy_id', jsonData.strategy_id);",
									"    console.log('üéØ Optimization strategy created with ID:', jsonData.strategy_id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Cost-Focused Optimization Strategy\",\n  \"description\": \"Prioritize cost reduction while maintaining performance\",\n  \"priority\": \"cost\",\n  \"parameters\": {\n    \"cost_weight\": 0.7,\n    \"performance_weight\": 0.2,\n    \"reliability_weight\": 0.1\n  },\n  \"constraints\": {\n    \"max_performance_degradation\": 10,\n    \"min_reliability_score\": 0.95,\n    \"max_change_frequency\": \"daily\"\n  },\n  \"target_clusters\": [\"{{test_cluster_id}}\"],\n  \"enabled\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/config/optimization/strategies",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"config",
								"optimization",
								"strategies"
							]
						},
						"description": "Create new optimization strategy"
					}
				},
				{
					"name": "Get Cluster Configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('‚úÖ Cluster configuration retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('‚úÖ Cluster config data exists', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.cluster_config).to.exist;",
									"    pm.expect(jsonData.optimization_settings).to.exist;",
									"    console.log('üèóÔ∏è  Cluster configuration retrieved');",
									"    ",
									"    if (jsonData.optimization_settings) {",
									"        console.log('üéØ Optimization settings:', Object.keys(jsonData.optimization_settings).join(', '));",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/config/clusters/{{test_cluster_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"config",
								"clusters",
								"{{test_cluster_id}}"
							]
						},
						"description": "Get configuration settings for specific cluster"
					}
				}
			]
		},
		{
			"name": "üîî Notifications",
			"description": "Notification and alerting system",
			"item": [
				{
					"name": "Send Notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('‚úÖ Notification sent successfully', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('‚úÖ Notification ID returned', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.notification_id).to.exist;",
									"    pm.expect(jsonData.status).to.exist;",
									"    console.log('üîî Notification sent with ID:', jsonData.notification_id);",
									"    console.log('üìÆ Delivery status:', jsonData.status);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"type\": \"optimization_complete\",\n  \"title\": \"Optimization Completed Successfully\",\n  \"message\": \"CPU optimization for cluster {{test_cluster_id}} completed with 25% cost savings\",\n  \"priority\": \"info\",\n  \"channels\": [\"email\", \"slack\"],\n  \"recipients\": [\"{{test_email}}\"],\n  \"data\": {\n    \"cluster_id\": \"{{test_cluster_id}}\",\n    \"savings_amount\": 250.50,\n    \"optimization_type\": \"cpu\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/notifications/send",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"notifications",
								"send"
							]
						},
						"description": "Send notification through configured channels"
					}
				},
				{
					"name": "Create Notification Channel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('‚úÖ Notification channel created', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('‚úÖ Channel ID returned', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.channel_id).to.exist;",
									"    pm.environment.set('notification_channel_id', jsonData.channel_id);",
									"    console.log('üì¢ Notification channel created with ID:', jsonData.channel_id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Development Team Slack\",\n  \"type\": \"slack\",\n  \"configuration\": {\n    \"webhook_url\": \"https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX\",\n    \"channel\": \"#dev-alerts\",\n    \"username\": \"UPID Bot\",\n    \"icon_emoji\": \":robot_face:\"\n  },\n  \"enabled\": true,\n  \"retry_config\": {\n    \"max_retries\": 3,\n    \"retry_delay\": \"5s\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/notifications/channels",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"notifications",
								"channels"
							]
						},
						"description": "Create new notification channel"
					}
				},
				{
					"name": "Create Alert Rule",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('‚úÖ Alert rule created', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('‚úÖ Alert rule ID returned', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.rule_id).to.exist;",
									"    console.log('üö® Alert rule created with ID:', jsonData.rule_id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"High CPU Utilization Alert\",\n  \"description\": \"Alert when CPU utilization exceeds 90% for 5 minutes\",\n  \"conditions\": {\n    \"metric\": \"cpu_utilization\",\n    \"operator\": \">\",\n    \"threshold\": 90,\n    \"duration\": \"5m\",\n    \"cluster_id\": \"{{test_cluster_id}}\"\n  },\n  \"severity\": \"warning\",\n  \"notification_channels\": [\"slack\", \"email\"],\n  \"enabled\": true,\n  \"cooldown_period\": \"15m\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/notifications/alerts/rules",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"notifications",
								"alerts",
								"rules"
							]
						},
						"description": "Create new alert rule for monitoring"
					}
				}
			]
		},
		{
			"name": "üìã Audit & Compliance",
			"description": "Audit logging and compliance reporting",
			"item": [
				{
					"name": "Create Audit Event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('‚úÖ Audit event created', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('‚úÖ Event ID returned', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.event_id).to.exist;",
									"    console.log('üìã Audit event created with ID:', jsonData.event_id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"event_type\": \"optimization_executed\",\n  \"user_id\": \"{{user_id}}\",\n  \"cluster_id\": \"{{test_cluster_id}}\",\n  \"action\": \"CPU optimization applied to production workloads\",\n  \"details\": {\n    \"pods_affected\": 15,\n    \"cost_savings\": 250.75,\n    \"performance_impact\": \"minimal\",\n    \"safety_score\": 0.96\n  },\n  \"metadata\": {\n    \"source_ip\": \"192.168.1.100\",\n    \"user_agent\": \"UPID-CLI/1.0\",\n    \"session_id\": \"sess_{{$randomAlphaNumeric}}\"\n  },\n  \"timestamp\": \"{{$isoTimestamp}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/audit/events",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"audit",
								"events"
							]
						},
						"description": "Create audit event for compliance tracking"
					}
				},
				{
					"name": "Search Audit Events",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('‚úÖ Audit search completed', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('‚úÖ Search results exist', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.events).to.be.an('array');",
									"    pm.expect(jsonData.total_count).to.exist;",
									"    console.log(`üìã Found ${jsonData.events.length} audit events`);",
									"    console.log(`üìä Total events: ${jsonData.total_count}`);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"filters\": {\n    \"event_type\": \"optimization_executed\",\n    \"cluster_id\": \"{{test_cluster_id}}\",\n    \"start_date\": \"2024-01-01T00:00:00Z\",\n    \"end_date\": \"2024-12-31T23:59:59Z\",\n    \"user_id\": \"{{user_id}}\"\n  },\n  \"sort\": {\n    \"field\": \"timestamp\",\n    \"order\": \"desc\"\n  },\n  \"pagination\": {\n    \"page\": 1,\n    \"limit\": 20\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/audit/events/search",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"audit",
								"events",
								"search"
							]
						},
						"description": "Search audit events with filters"
					}
				},
				{
					"name": "Generate Compliance Report",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('‚úÖ Compliance report generation started', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('‚úÖ Report generation details returned', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.report_id).to.exist;",
									"    pm.expect(jsonData.status).to.exist;",
									"    console.log('üìã Compliance report generation started');",
									"    console.log('üìã Report ID:', jsonData.report_id);",
									"    console.log('üìã Status:', jsonData.status);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],									"pm.test('‚úÖ Recommendations generated', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('‚úÖ Recommendations data exists', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.recommendations).to.be.an('array');",
									"    pm.expect(jsonData.total_savings_estimate).to.exist;",
									"    console.log(`üí∞ Generated ${jsonData.recommendations.length} recommendations`);",
									"    console.log('üí≤ Total estimated savings:', jsonData.total_savings_estimate);",
									"    ",
									"    if (jsonData.recommendations.length > 0) {",
									"        pm.environment.set('recommendation_id', jsonData.recommendations[0].id);",
									"        console.log('üìå First recommendation ID stored:', jsonData.recommendations[0].id);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"cluster_id\": \"{{test_cluster_id}}\",\n  \"optimization_type\": \"resource_right_sizing\",\n  \"priority\": \"high_impact\",\n  \"max_recommendations\": 10,\n  \"filters\": {\n    \"namespaces\": [\"default\", \"production\"],\n    \"resource_types\": [\"cpu\", \"memory\"],\n    \"min_savings_threshold\": 50\n  },\n  \"include_simulations\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/optimization/recommendations/generate",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"optimization",
								"recommendations",
								"generate"
							]
						},
						"description": "Generate optimization recommendations for cluster"
					}
				},
				{
					"name": "Simulate Recommendation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('‚úÖ Simulation completed successfully', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('‚úÖ Simulation results exist', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.simulation_id).to.exist;",
									"    pm.expect(jsonData.projected_impact).to.exist;",
									"    console.log('üéÆ Simulation completed with ID:', jsonData.simulation_id);",
									"    ",
									"    if (jsonData.projected_impact) {",
									"        console.log('üìä Projected impact summary:', Object.keys(jsonData.projected_impact).join(', '));",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"simulation_parameters\": {\n    \"time_horizon\": \"30d\",\n    \"confidence_level\": 0.95,\n    \"include_risk_assessment\": true,\n    \"monte_carlo_iterations\": 1000\n  },\n  \"scenario_variants\": [\n    {\"name\": \"conservative\", \"safety_margin\": 0.3},\n    {\"name\": \"aggressive\", \"safety_margin\": 0.1}\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/optimization/recommendations/{{recommendation_id}}/simulate",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"optimization",
								"recommendations",
								"{{recommendation_id}}",
								"simulate"
							]
						},
						"description": "Simulate the impact of applying a recommendation"
					}
				},
				{
					"name": "CPU Optimization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('‚úÖ CPU optimization completed', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('‚úÖ CPU optimization results exist', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.optimization_results).to.exist;",
									"    pm.expect(jsonData.cpu_recommendations).to.exist;",
									"    console.log('üî• CPU optimization completed');",
									"    ",
									"    if (jsonData.cpu_recommendations) {",
									"        console.log(`‚ö° Generated ${jsonData.cpu_recommendations.length} CPU recommendations`);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"cluster_id\": \"{{test_cluster_id}}\",\n  \"target_utilization\": 70,\n  \"optimization_strategy\": \"right_sizing\",\n  \"safety_margin\": 20,\n  \"analysis_window\": \"14d\",\n  \"exclude_patterns\": [\"maintenance_windows\", \"deployment_spikes\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/optimization/resources/cpu",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"optimization",
								"resources",
								"cpu"
							]
						},
						"description": "Perform CPU-specific optimization analysis"
					}
				},
				{
					"name": "Cost Analysis",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('‚úÖ Cost analysis completed', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('‚úÖ Cost analysis results exist', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.current_cost).to.exist;",
									"    pm.expect(jsonData.optimized_cost).to.exist;",
									"    pm.expect(jsonData.potential_savings).to.exist;",
									"    console.log('üí∞ Current cost:', jsonData.current_cost);",
									"    console.log('üí∞ Optimized cost:', jsonData.optimized_cost);",
									"    console.log('üí∞ Potential savings:', jsonData.potential_savings);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"cluster_id\": \"{{test_cluster_id}}\",\n  \"cost_model\": \"aws_ec2\",\n  \"analysis_period\": \"30d\",\n  \"include_storage_costs\": true,\n  \"include_network_costs\": true,\n  \"currency\": \"USD\",\n  \"region_pricing\": \"us-west-2\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/optimization/cost/analyze",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"optimization",
								"cost",
								"analyze"
							]
						},
						"description": "Analyze current and projected costs"
					}
				}
			]
		},
		{
			"name": "üõ°Ô∏è Safety Validation",
			"description": "Safety checks and risk assessment",
			"item": [
				{
					"name": "Validate Optimization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('‚úÖ Safety validation completed', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('‚úÖ Validation results exist', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.validation_id).to.exist;",
									"    pm.expect(jsonData.safety_score).to.exist;",
									"    pm.expect(jsonData.validation_status).to.exist;",
									"    console.log('üõ°Ô∏è  Safety validation status:', jsonData.validation_status);",
									"    console.log('üõ°Ô∏è  Safety score:', jsonData.safety_score);",
									"    ",
									"    pm.environment.set('validation_id', jsonData.validation_id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"optimization_plan\": {\n    \"cluster_id\": \"{{test_cluster_id}}\",\n    \"changes\": [\n      {\n        \"resource_type\": \"cpu\",\n        \"current_value\": \"500m\",\n        \"proposed_value\": \"400m\",\n        \"pod_selector\": \"app=web-server\",\n        \"namespace\": \"default\"\n      },\n      {\n        \"resource_type\": \"memory\",\n        \"current_value\": \"1Gi\",\n        \"proposed_value\": \"800Mi\",\n        \"pod_selector\": \"app=web-server\",\n        \"namespace\": \"default\"\n      }\n    ]\n  },\n  \"validation_level\": \"strict\",\n  \"include_rollback_plan\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/safety/validate",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"safety",
								"validate"
							]
						},
						"description": "Validate optimization plan for safety"
					}
				},
				{
					"name": "Risk Assessment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('‚úÖ Risk assessment completed', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('‚úÖ Risk assessment data exists', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.risk_score).to.exist;",
									"    pm.expect(jsonData.risk_factors).to.exist;",
									"    pm.expect(jsonData.mitigation_strategies).to.exist;",
									"    console.log('‚ö†Ô∏è  Risk score:', jsonData.risk_score);",
									"    ",
									"    if (jsonData.risk_factors && jsonData.risk_factors.length) {",
									"        console.log(`‚ö†Ô∏è  Found ${jsonData.risk_factors.length} risk factors`);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"cluster_id\": \"{{test_cluster_id}}\",\n  \"proposed_changes\": [\n    {\n      \"type\": \"cpu_reduction\",\n      \"magnitude\": 20,\n      \"affected_pods\": 15,\n      \"namespace\": \"production\"\n    },\n    {\n      \"type\": \"memory_reduction\",\n      \"magnitude\": 15,\n      \"affected_pods\": 10,\n      \"namespace\": \"production\"\n    }\n  ],\n  \"business_criticality\": \"high\",\n  \"assessment_depth\": \"comprehensive\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/safety/risk/assess",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"safety",
								"risk",
								"assess"
							]
						},
						"description": "Assess risk of proposed changes"
					}
				},
				{
					"name": "Create Safety Rule",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('‚úÖ Safety rule created', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('‚úÖ Safety rule ID returned', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.rule_id).to.exist;",
									"    pm.environment.set('safety_rule_id', jsonData.rule_id);",
									"    console.log('üõ°Ô∏è  Safety rule created with ID:', jsonData.rule_id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"CPU Change Limit Rule\",\n  \"description\": \"Limit CPU changes to maximum 50% in single operation\",\n  \"rule_type\": \"change_limit\",\n  \"conditions\": {\n    \"resource_type\": \"cpu\",\n    \"max_change_percent\": 50,\n    \"applies_to\": \"all_pods\",\n    \"exclude_namespaces\": [\"kube-system\"]\n  },\n  \"severity\": \"error\",\n  \"enabled\": true,\n  \"scope\": \"cluster\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/safety/rules",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"safety",
								"rules"
							]
						},
						"description": "Create a new safety rule for validations"
					}
				},
				{
					"name": "Set Safety Thresholds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('‚úÖ Safety threshold created', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('‚úÖ Threshold ID returned', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.threshold_id).to.exist;",
									"    console.log('üö® Safety threshold created with ID:', jsonData.threshold_id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"CPU Utilization Safety Threshold\",\n  \"resource_type\": \"cpu\",\n  \"threshold_type\": \"utilization\",\n  \"warning_threshold\": 80,\n  \"critical_threshold\": 95,\n  \"cluster_id\": \"{{test_cluster_id}}\",\n  \"monitoring_window\": \"5m\",\n  \"alert_channels\": [\"slack\", \"email\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/safety/thresholds",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"safety",
								"thresholds"
							]
						},
						"description": "Set safety thresholds for monitoring"
					}
				}
			]
		},
		{
			"name": "üöÄ Deployment Service",
			"description": "Deployment execution and rollback management",
			"item": [
				{
					"name": "Create Deployment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('‚úÖ Deployment created successfully', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('‚úÖ Deployment ID returned', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.deployment_id).to.exist;",
									"    pm.environment.set('deployment_id', jsonData.deployment_id);",
									"    console.log('üöÄ Deployment created with ID:', jsonData.deployment_id);",
									"});",
									"",
									"pm.test('‚úÖ Deployment status is valid', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.exist;",
									"    console.log('üìä Deployment status:', jsonData.status);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"CPU Optimization Deployment\",\n  \"cluster_id\": \"{{test_cluster_id}}\",\n  \"optimization_plan\": {\n    \"changes\": [\n      {\n        \"resource_type\": \"cpu\",\n        \"target_pods\": [\"web-server-1\", \"web-server-2\"],\n        \"new_limits\": \"400m\",\n        \"new_requests\": \"200m\",\n        \"namespace\": \"default\"\n      }\n    ],\n    \"estimated_savings\": 250.50,\n    \"confidence_score\": 0.96\n  },\n  \"deployment_strategy\": \"progressive\",\n  \"rollback_enabled\": true,\n  \"safety_checks\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/deployments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"deployments"
							]
						},
						"description": "Create a new optimization deployment"
					}
				},
				{
					"name": "Execute Deployment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('‚úÖ Deployment execution started', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('‚úÖ Execution status confirmed', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.execution_status).to.exist;",
									"    pm.expect(jsonData.execution_id).to.exist;",
									"    console.log('üöÄ Deployment execution status:', jsonData.execution_status);",
									"    console.log('üöÄ Execution ID:', jsonData.execution_id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"execution_mode\": \"safe\",\n  \"monitoring_enabled\": true,\n  \"auto_rollback_threshold\": 0.8,\n  \"notification_channels\": [\"slack\"],\n  \"approval_required\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/deployments/{{deployment_id}}/execute",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"deployments",
								"{{deployment_id}}",
								"execute"
							]
						},
						"description": "Execute the deployment with specified parameters"
					}
				},
				{
					"name": "Get Deployment Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('‚úÖ Deployment status retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('‚úÖ Status information complete', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.exist;",
									"    pm.expect(jsonData.progress).to.exist;",
									"    console.log('üìä Deployment status:', jsonData.status);",
									"    console.log('üìà Progress:', jsonData.progress + '%');",
									"    ",
									"    if (jsonData.estimated_completion) {",
									"        console.log('‚è±Ô∏è  Estimated completion:', jsonData.estimated_completion);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/deployments/{{deployment_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"deployments",
								"{{deployment_id}}"
							]
						},
						"description": "Get current status of deployment"
					}
				},
				{
					"name": "Start Progressive Rollout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('‚úÖ Progressive rollout started', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('‚úÖ Rollout status confirmed', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.rollout_status).to.exist;",
									"    console.log('üîÑ Rollout status:', jsonData.rollout_status);",
									"    ",
									"    if (jsonData.phases) {",
									"        console.log(`üìã Rollout phases: ${jsonData.phases.length} phases planned`);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"phases\": [\n    {\"percentage\": 10, \"wait_time\": \"5m\", \"validation_time\": \"2m\"},\n    {\"percentage\": 50, \"wait_time\": \"10m\", \"validation_time\": \"5m\"},\n    {\"percentage\": 100, \"wait_time\": \"0m\", \"validation_time\": \"10m\"}\n  ],\n  \"success_criteria\": {\n    \"error_rate_threshold\": 1,\n    \"latency_threshold\": 500,\n    \"cpu_threshold\": 90\n  },\n  \"auto_proceed\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/deployments/{{deployment_id}}/rollout/start",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"deployments",
								"{{deployment_id}}",
								"rollout",
								"start"
							]
						},
						"description": "Start progressive rollout of deployment"
					}
				},
				{
					"name": "Get Deployment Metrics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('‚úÖ Deployment metrics retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('‚úÖ Metrics data exists', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.performance_metrics).to.exist;",
									"    pm.expect(jsonData.resource_metrics).to.exist;",
									"    console.log('üìä Deployment metrics retrieved');",
									"    ",
									"    if (jsonData.performance_metrics) {",
									"        console.log('‚ö° Performance metrics available:', Object.keys(jsonData.performance_metrics).join(', '));",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/deployments/{{deployment_id}}/metrics",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"deployments",
								"{{deployment_id}}",
								"metrics"
							]
						},
						"description": "Get performance and resource metrics for deployment"
					}
				}
			]
		},
		{
			"name": "üíº Business Intelligence",
			"description": "Cost analytics and ROI tracking",
			"item": [
				{
					"name": "Calculate Cost Analysis",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('‚úÖ Cost analysis completed', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('‚úÖ Cost analysis data exists', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.total_cost).to.exist;",
									"    pm.expect(jsonData.cost_breakdown).to.exist;",
									"    pm.expect(jsonData.optimization_savings).to.exist;",
									"    console.log('üí∞ Total cost:', jsonData.total_cost);",
									"    console.log('üí∞ Optimization savings:', jsonData.optimization_savings);",
									"    ",
									"    // Store cost analysis ID if available",
									"    if (jsonData.analysis_id) {",
									"        pm.environment.set('cost_analysis_id', jsonData.analysis_id);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}									"pm.test('‚úÖ CPU metrics data exists', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.cpu_metrics).to.exist;",
									"    console.log('üî• CPU metrics retrieved for cluster');",
									"    ",
									"    // Log CPU utilization summary",
									"    if (jsonData.cpu_metrics.summary) {",
									"        console.log('  Average CPU:', jsonData.cpu_metrics.summary.average + '%');",
									"        console.log('  Peak CPU:', jsonData.cpu_metrics.summary.peak + '%');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/metrics/resources/{{test_cluster_id}}/cpu",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"metrics",
								"resources",
								"{{test_cluster_id}}",
								"cpu"
							]
						},
						"description": "Get detailed CPU utilization metrics"
					}
				},
				{
					"name": "Query Historical Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('‚úÖ Historical data query completed', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('‚úÖ Historical data points exist', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data_points).to.be.an('array');",
									"    console.log(`üìà Retrieved ${jsonData.data_points.length} historical data points`);",
									"    ",
									"    if (jsonData.query_id) {",
									"        pm.environment.set('historical_query_id', jsonData.query_id);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"cluster_id\": \"{{test_cluster_id}}\",\n  \"metric_type\": \"cpu_utilization\",\n  \"start_time\": \"2024-01-01T00:00:00Z\",\n  \"end_time\": \"2024-01-31T23:59:59Z\",\n  \"aggregation\": \"avg\",\n  \"interval\": \"1h\",\n  \"filters\": {\n    \"namespace\": \"default\",\n    \"resource_type\": \"pod\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/metrics/history/query",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"metrics",
								"history",
								"query"
							]
						},
						"description": "Query historical metrics data with aggregation"
					}
				},
				{
					"name": "Aggregate Metrics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('‚úÖ Metrics aggregation started', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('‚úÖ Aggregation ID returned', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.aggregation_id).to.exist;",
									"    pm.environment.set('aggregation_id', jsonData.aggregation_id);",
									"    console.log('üîÑ Metrics aggregation started with ID:', jsonData.aggregation_id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"cluster_id\": \"{{test_cluster_id}}\",\n  \"metrics\": [\"cpu\", \"memory\", \"network\"],\n  \"time_range\": \"24h\",\n  \"group_by\": [\"namespace\", \"pod\"],\n  \"aggregation_functions\": [\"avg\", \"max\", \"p95\"],\n  \"include_trends\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/metrics/aggregate",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"metrics",
								"aggregate"
							]
						},
						"description": "Aggregate metrics data for analysis"
					}
				}
			]
		},
		{
			"name": "üß† Rules Engine & Algorithms",
			"description": "Optimization rules and algorithm management",
			"item": [
				{
					"name": "Create Optimization Rule",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('‚úÖ Optimization rule created', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('‚úÖ Rule ID returned', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.rule_id).to.exist;",
									"    pm.environment.set('test_rule_id', jsonData.rule_id);",
									"    console.log('üß† Optimization rule created with ID:', jsonData.rule_id);",
									"});",
									"",
									"pm.test('‚úÖ Rule validation passed', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.validation_status).to.equal('passed');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"CPU Right-sizing Rule\",\n  \"category\": \"cpu-optimization\",\n  \"description\": \"Optimize CPU allocation based on P95 utilization patterns\",\n  \"conditions\": {\n    \"cpu_utilization_threshold\": 80,\n    \"observation_period\": \"7d\",\n    \"min_confidence\": 0.95,\n    \"min_data_points\": 100\n  },\n  \"actions\": {\n    \"recommendation_type\": \"vertical_scale\",\n    \"max_change_percent\": 50,\n    \"safety_margin\": 20\n  },\n  \"priority\": \"high\",\n  \"enabled\": true,\n  \"tags\": [\"cost-optimization\", \"performance\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/rules",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"rules"
							]
						},
						"description": "Create a new optimization rule for resource management"
					}
				},
				{
					"name": "List Optimization Rules",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('‚úÖ Rules list retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('‚úÖ Rules array exists', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.rules).to.be.an('array');",
									"    console.log(`üß† Found ${jsonData.rules.length} optimization rules`);",
									"    ",
									"    // Log rule categories",
									"    const categories = [...new Set(jsonData.rules.map(r => r.category))];",
									"    console.log('üìã Rule categories:', categories.join(', '));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/rules?category=cpu-optimization&enabled=true",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"rules"
							],
							"query": [
								{
									"key": "category",
									"value": "cpu-optimization"
								},
								{
									"key": "enabled",
									"value": "true"
								}
							]
						},
						"description": "List optimization rules with filtering"
					}
				},
				{
					"name": "Test Rule",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('‚úÖ Rule test completed', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('‚úÖ Test results are valid', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.test_result).to.exist;",
									"    pm.expect(jsonData.matches).to.exist;",
									"    console.log('üß™ Rule test result:', jsonData.test_result);",
									"    console.log('üéØ Rule matches:', jsonData.matches);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"cluster_id\": \"{{test_cluster_id}}\",\n  \"test_data\": {\n    \"cpu_utilization\": 85,\n    \"memory_utilization\": 60,\n    \"observation_period\": \"7d\",\n    \"data_points\": 150,\n    \"peak_utilization\": 92,\n    \"avg_utilization\": 75\n  },\n  \"validation_mode\": \"strict\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/rules/{{test_rule_id}}/test",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"rules",
								"{{test_rule_id}}",
								"test"
							]
						},
						"description": "Test an optimization rule against sample data"
					}
				},
				{
					"name": "Create Algorithm",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('‚úÖ Algorithm created successfully', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('‚úÖ Algorithm ID returned', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.algorithm_id).to.exist;",
									"    pm.environment.set('test_algorithm_id', jsonData.algorithm_id);",
									"    console.log('üî¨ Algorithm created with ID:', jsonData.algorithm_id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Linear Regression Forecasting\",\n  \"type\": \"statistical\",\n  \"description\": \"Linear regression algorithm for resource usage forecasting\",\n  \"version\": \"1.0.0\",\n  \"parameters\": {\n    \"window_size\": 168,\n    \"confidence_interval\": 0.95,\n    \"seasonal_adjustment\": true,\n    \"outlier_detection\": true\n  },\n  \"input_schema\": {\n    \"required\": [\"historical_data\", \"forecast_horizon\"],\n    \"optional\": [\"seasonal_periods\", \"trend_adjustment\"]\n  },\n  \"output_schema\": {\n    \"forecast_values\": \"array\",\n    \"confidence_bounds\": \"object\",\n    \"accuracy_metrics\": \"object\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/algorithms",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"algorithms"
							]
						},
						"description": "Create a new mathematical algorithm for predictions"
					}
				},
				{
					"name": "Execute Algorithm",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('‚úÖ Algorithm execution started', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('‚úÖ Execution results valid', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.execution_id).to.exist;",
									"    pm.expect(jsonData.status).to.exist;",
									"    console.log('‚ö° Algorithm execution status:', jsonData.status);",
									"    ",
									"    if (jsonData.execution_id) {",
									"        pm.environment.set('algorithm_execution_id', jsonData.execution_id);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"input_data\": {\n    \"historical_data\": [\n      {\"timestamp\": \"2024-01-01T00:00:00Z\", \"value\": 45.2},\n      {\"timestamp\": \"2024-01-01T01:00:00Z\", \"value\": 52.1},\n      {\"timestamp\": \"2024-01-01T02:00:00Z\", \"value\": 48.7},\n      {\"timestamp\": \"2024-01-01T03:00:00Z\", \"value\": 55.3},\n      {\"timestamp\": \"2024-01-01T04:00:00Z\", \"value\": 49.8}\n    ],\n    \"forecast_horizon\": 24,\n    \"seasonal_periods\": [24, 168]\n  },\n  \"execution_context\": {\n    \"cluster_id\": \"{{test_cluster_id}}\",\n    \"resource_type\": \"cpu\",\n    \"priority\": \"high\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/algorithms/{{test_algorithm_id}}/execute",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"algorithms",
								"{{test_algorithm_id}}",
								"execute"
							]
						},
						"description": "Execute algorithm with input data"
					}
				}
			]
		},
		{
			"name": "üìà Statistical Prediction",
			"description": "Statistical analysis and forecasting",
			"item": [
				{
					"name": "Statistical Analysis",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('‚úÖ Statistical analysis completed', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('‚úÖ Analysis results exist', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.analysis_id).to.exist;",
									"    pm.expect(jsonData.statistics).to.exist;",
									"    console.log('üìà Analysis completed with ID:', jsonData.analysis_id);",
									"    ",
									"    if (jsonData.statistics) {",
									"        console.log('üìä Statistics summary:', Object.keys(jsonData.statistics).join(', '));",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"cluster_id\": \"{{test_cluster_id}}\",\n  \"metric_type\": \"cpu_utilization\",\n  \"time_range\": \"30d\",\n  \"analysis_type\": [\"trend\", \"seasonality\", \"variance\", \"correlation\"],\n  \"confidence_level\": 0.95,\n  \"include_anomalies\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/statistics/analyze",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"statistics",
								"analyze"
							]
						},
						"description": "Perform statistical analysis on metrics data"
					}
				},
				{
					"name": "Generate Forecast",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('‚úÖ Forecast generated successfully', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('‚úÖ Prediction results exist', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.prediction_id).to.exist;",
									"    pm.expect(jsonData.forecast_data).to.exist;",
									"    pm.environment.set('prediction_id', jsonData.prediction_id);",
									"    console.log('üîÆ Forecast generated with ID:', jsonData.prediction_id);",
									"    ",
									"    if (jsonData.forecast_data && jsonData.forecast_data.length) {",
									"        console.log(`üìä Generated ${jsonData.forecast_data.length} forecast points`);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"cluster_id\": \"{{test_cluster_id}}\",\n  \"metric_type\": \"cpu_utilization\",\n  \"forecast_horizon\": 24,\n  \"method\": \"linear_regression\",\n  \"confidence_level\": 0.95,\n  \"include_seasonality\": true,\n  \"historical_window\": \"30d\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/forecasting/predict",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"forecasting",
								"predict"
							]
						},
						"description": "Generate resource usage forecasts"
					}
				},
				{
					"name": "Detect Patterns",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('‚úÖ Pattern detection completed', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('‚úÖ Pattern results exist', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.patterns).to.exist;",
									"    pm.expect(jsonData.confidence_scores).to.exist;",
									"    console.log('üîç Pattern detection completed');",
									"    ",
									"    if (jsonData.patterns && jsonData.patterns.length) {",
									"        console.log(`üéØ Found ${jsonData.patterns.length} patterns`);",
									"        jsonData.patterns.forEach((pattern, i) => {",
									"            if (i < 3) console.log(`  Pattern ${i+1}: ${pattern.type} (confidence: ${pattern.confidence})`);",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"cluster_id\": \"{{test_cluster_id}}\",\n  \"data_points\": [\n    {\"timestamp\": \"2024-01-01T00:00:00Z\", \"value\": 45.2},\n    {\"timestamp\": \"2024-01-01T01:00:00Z\", \"value\": 52.1},\n    {\"timestamp\": \"2024-01-01T02:00:00Z\", \"value\": 48.7},\n    {\"timestamp\": \"2024-01-01T03:00:00Z\", \"value\": 55.3},\n    {\"timestamp\": \"2024-01-01T04:00:00Z\", \"value\": 49.8}\n  ],\n  \"pattern_types\": [\"seasonal\", \"trend\", \"anomaly\", \"cyclical\"],\n  \"sensitivity\": 0.8,\n  \"min_pattern_length\": 3\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/patterns/detect",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"patterns",
								"detect"
							]
						},
						"description": "Detect patterns in resource usage data"
					}
				},
				{
					"name": "Calculate Confidence Score",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('‚úÖ Confidence score calculated', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('‚úÖ Confidence score is valid', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.confidence_score).to.exist;",
									"    pm.expect(jsonData.confidence_score).to.be.within(0, 1);",
									"    console.log('üéØ Confidence score:', (jsonData.confidence_score * 100).toFixed(2) + '%');",
									"    ",
									"    if (jsonData.accuracy_metrics) {",
									"        console.log('üìä Accuracy metrics:', Object.keys(jsonData.accuracy_metrics).join(', '));",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"prediction_id\": \"{{prediction_id}}\",\n  \"validation_data\": [\n    {\"timestamp\": \"2024-01-02T00:00:00Z\", \"actual\": 47.8, \"predicted\": 48.2},\n    {\"timestamp\": \"2024-01-02T01:00:00Z\", \"actual\": 51.3, \"predicted\": 50.9},\n    {\"timestamp\": \"2024-01-02T02:00:00Z\", \"actual\": 46.5, \"predicted\": 47.1}\n  ],\n  \"metrics\": [\"mape\", \"rmse\", \"mae\"],\n  \"confidence_threshold\": 0.95\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/confidence/calculate",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"confidence",
								"calculate"
							]
						},
						"description": "Calculate confidence score for predictions"
					}
				}
			]
		},
		{
			"name": "üéØ Optimization Engine",
			"description": "Resource optimization and recommendations",
			"item": [
				{
					"name": "Analyze Cluster for Optimization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('‚úÖ Optimization analysis completed', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('‚úÖ Analysis results exist', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.analysis_id).to.exist;",
									"    pm.expect(jsonData.optimization_opportunities).to.exist;",
									"    pm.environment.set('optimization_analysis_id', jsonData.analysis_id);",
									"    console.log('üéØ Optimization analysis completed with ID:', jsonData.analysis_id);",
									"    ",
									"    if (jsonData.optimization_opportunities) {",
									"        console.log(`üí° Found ${jsonData.optimization_opportunities.length} opportunities`);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"cluster_id\": \"{{test_cluster_id}}\",\n  \"scope\": \"cluster\",\n  \"optimization_targets\": [\"cost\", \"performance\", \"efficiency\"],\n  \"analysis_depth\": \"deep\",\n  \"include_predictions\": true,\n  \"time_horizon\": \"30d\",\n  \"constraints\": {\n    \"max_downtime\": \"0s\",\n    \"min_performance_retention\": 0.95\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/optimization/analyze",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"optimization",
								"analyze"
							]
						},
						"description": "Analyze cluster for optimization opportunities"
					}
				},
				{
					"name": "Generate Recommendations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('‚úÖ Recommendations generated', function () {",
									"    pm.response.to{
	"info": {
		"_postman_id": "upid-api-collection-v1",
		"name": "UPID - Universal Pod Intelligence Director API",
		"description": "Complete API testing collection for UPID backend services. Import this collection and the environment to start testing immediately.\n\n**Quick Start:**\n1. Import this collection\n2. Import the environment variables\n3. Update base_url, test_email, test_password in environment\n4. Run 'Login' request first\n5. Execute other requests in any order\n\n**Features:**\n- 100+ API endpoints across 14 services\n- Automated authentication & token management\n- Built-in response validation\n- Performance benchmarking\n- Environment variable auto-population",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "upid-backend-team"
	},
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{auth_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global pre-request script for all requests",
					"console.log('üöÄ Executing UPID API request to: ' + pm.request.url);",
					"",
					"// Check authentication token",
					"const token = pm.environment.get('auth_token');",
					"const tokenExpiry = pm.environment.get('token_expiry');",
					"const currentTime = new Date();",
					"",
					"// Skip auth check for login endpoints",
					"const isAuthEndpoint = pm.request.url.toString().includes('/auth/login') || ",
					"                       pm.request.url.toString().includes('/auth/refresh') ||",
					"                       pm.request.url.toString().includes('/gateway/health');",
					"",
					"if (!isAuthEndpoint) {",
					"    if (!token) {",
					"        console.log('‚ö†Ô∏è  No auth token found. Please run Login request first.');",
					"    } else if (tokenExpiry && currentTime > new Date(tokenExpiry)) {",
					"        console.log('‚ö†Ô∏è  Token expired. Consider refreshing token.');",
					"    }",
					"}",
					"",
					"// Set request timestamp for performance tracking",
					"pm.environment.set('request_start_time', currentTime.toISOString());",
					"",
					"// Add standard headers",
					"pm.request.headers.add({",
					"    key: 'User-Agent',",
					"    value: 'UPID-Postman-Collection/1.0'",
					"});",
					"",
					"pm.request.headers.add({",
					"    key: 'X-Request-ID',",
					"    value: pm.variables.replaceIn('{{$guid}}')",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script for all responses",
					"const responseTime = pm.response.responseTime;",
					"const statusCode = pm.response.code;",
					"const requestUrl = pm.request.url.toString();",
					"",
					"console.log(`üìä Response: ${statusCode} | ${responseTime}ms | ${requestUrl}`);",
					"",
					"// Standard response validation",
					"pm.test('‚úÖ Response time is acceptable (<5s)', function () {",
					"    pm.expect(responseTime).to.be.below(5000);",
					"});",
					"",
					"pm.test('‚úÖ Status code is not 5xx', function () {",
					"    pm.expect(statusCode).to.be.below(500);",
					"});",
					"",
					"// JSON response validation (skip for health checks)",
					"if (!requestUrl.includes('/health') && statusCode >= 200 && statusCode < 300) {",
					"    pm.test('‚úÖ Response is valid JSON', function () {",
					"        pm.response.to.be.json;",
					"    });",
					"    ",
					"    pm.test('‚úÖ Response has Content-Type header', function () {",
					"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
					"    });",
					"}",
					"",
					"// Performance benchmarks for specific endpoints",
					"if (requestUrl.includes('/optimization/analyze')) {",
					"    pm.test('üöÄ Optimization analysis completes in <10s', function () {",
					"        pm.expect(responseTime).to.be.below(10000);",
					"    });",
					"} else if (requestUrl.includes('/auth/') || requestUrl.includes('/health')) {",
					"    pm.test('‚ö° Auth/Health endpoints respond in <1s', function () {",
					"        pm.expect(responseTime).to.be.below(1000);",
					"    });",
					"} else {",
					"    pm.test('‚ö° Standard endpoints respond in <2s', function () {",
					"        pm.expect(responseTime).to.be.below(2000);",
					"    });",
					"}",
					"",
					"// Log errors for debugging",
					"if (statusCode >= 400) {",
					"    console.log('‚ùå Error Response Body:', pm.response.text());",
					"}",
					"",
					"// Track API performance metrics",
					"pm.globals.set(`last_response_time_${requestUrl.split('/').pop()}`, responseTime);",
					"pm.globals.set(`last_request_timestamp`, new Date().toISOString());"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8080",
			"type": "string",
			"description": "Base URL for UPID API server"
		},
		{
			"key": "api_version",
			"value": "v1",
			"type": "string",
			"description": "API version"
		}
	],
	"item": [
		{
			"name": "üîê Authentication & Authorization",
			"description": "Authentication, user management, and authorization endpoints",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('‚úÖ Login successful', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('‚úÖ Access token received', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.access_token).to.exist;",
									"    ",
									"    // Store tokens in environment",
									"    pm.environment.set('auth_token', jsonData.access_token);",
									"    pm.environment.set('refresh_token', jsonData.refresh_token || '');",
									"    ",
									"    // Set token expiry (15 minutes from now)",
									"    const expiry = new Date();",
									"    expiry.setMinutes(expiry.getMinutes() + 15);",
									"    pm.environment.set('token_expiry', expiry.toISOString());",
									"    ",
									"    console.log('üîë Authentication token stored successfully');",
									"});",
									"",
									"pm.test('‚úÖ Token format is valid', function () {",
									"    const jsonData = pm.response.json();",
									"    const token = jsonData.access_token;",
									"    pm.expect(token).to.be.a('string');",
									"    pm.expect(token.length).to.be.above(10);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"auth",
								"login"
							]
						},
						"description": "Authenticate user and receive JWT tokens. This must be run first to access protected endpoints."
					}
				},
				{
					"name": "Get User Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('‚úÖ Profile retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('‚úÖ Profile contains required fields', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.exist;",
									"    pm.expect(jsonData.email).to.exist;",
									"    pm.expect(jsonData.roles).to.exist;",
									"    ",
									"    // Store user ID for other requests",
									"    pm.environment.set('user_id', jsonData.id);",
									"    console.log('üë§ User ID stored:', jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/auth/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"auth",
								"profile"
							]
						},
						"description": "Get current user profile information"
					}
				},
				{
					"name": "Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('‚úÖ Token refreshed successfully', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('‚úÖ New access token received', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.access_token).to.exist;",
									"    ",
									"    // Update stored token",
									"    pm.environment.set('auth_token', jsonData.access_token);",
									"    ",
									"    // Update expiry time",
									"    const expiry = new Date();",
									"    expiry.setMinutes(expiry.getMinutes() + 15);",
									"    pm.environment.set('token_expiry', expiry.toISOString());",
									"    ",
									"    console.log('üîÑ Token refreshed successfully');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/auth/refresh",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"auth",
								"refresh"
							]
						},
						"description": "Refresh expired access token using refresh token"
					}
				},
				{
					"name": "List Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('‚úÖ Users list retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('‚úÖ Users array exists', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.users).to.be.an('array');",
									"    console.log(`üë• Found ${jsonData.users.length} users`);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/users?page=1&limit=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						},
						"description": "List system users with pagination"
					}
				},
				{
					"name": "List Roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('‚úÖ Roles list retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('‚úÖ Roles array exists', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.roles).to.be.an('array');",
									"    console.log(`üõ°Ô∏è  Found ${jsonData.roles.length} roles`);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/roles",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"roles"
							]
						},
						"description": "List available user roles and permissions"
					}
				}
			]
		},
		{
			"name": "üèóÔ∏è Cluster Management",
			"description": "Kubernetes cluster registration and management",
			"item": [
				{
					"name": "Register Cluster",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('‚úÖ Cluster registered successfully', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('‚úÖ Cluster ID returned', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.cluster_id).to.exist;",
									"    ",
									"    // Store cluster ID for subsequent requests",
									"    pm.environment.set('test_cluster_id', jsonData.cluster_id);",
									"    console.log('üèóÔ∏è  Cluster registered with ID:', jsonData.cluster_id);",
									"});",
									"",
									"pm.test('‚úÖ Cluster details are valid', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.exist;",
									"    pm.expect(jsonData.status).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"test-cluster-{{$randomInt}}\",\n  \"region\": \"us-west-2\",\n  \"environment\": \"development\",\n  \"kubeconfig\": \"{{test_kubeconfig}}\",\n  \"description\": \"Test cluster for UPID API validation\",\n  \"tags\": {\n    \"purpose\": \"testing\",\n    \"team\": \"platform\",\n    \"environment\": \"dev\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/clusters",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"clusters"
							]
						},
						"description": "Register a new Kubernetes cluster with UPID"
					}
				},
				{
					"name": "List Clusters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('‚úÖ Clusters list retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('‚úÖ Clusters array exists', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.clusters).to.be.an('array');",
									"    console.log(`üèóÔ∏è  Found ${jsonData.clusters.length} clusters`);",
									"    ",
									"    // If no test cluster ID set, use first cluster",
									"    if (!pm.environment.get('test_cluster_id') && jsonData.clusters.length > 0) {",
									"        pm.environment.set('test_cluster_id', jsonData.clusters[0].id);",
									"        console.log('üìå Using first cluster as test cluster:', jsonData.clusters[0].id);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/clusters",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"clusters"
							]
						},
						"description": "List all registered clusters"
					}
				},
				{
					"name": "Get Cluster Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('‚úÖ Cluster details retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('‚úÖ Cluster details are complete', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.exist;",
									"    pm.expect(jsonData.name).to.exist;",
									"    pm.expect(jsonData.status).to.exist;",
									"    pm.expect(jsonData.region).to.exist;",
									"    console.log('üèóÔ∏è  Cluster status:', jsonData.status);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/clusters/{{test_cluster_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"clusters",
								"{{test_cluster_id}}"
							]
						},
						"description": "Get detailed information about a specific cluster"
					}
				},
				{
					"name": "Get Cluster Health",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('‚úÖ Health check completed', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('‚úÖ Health status information exists', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.exist;",
									"    pm.expect(jsonData.components).to.exist;",
									"    console.log('üíö Cluster health status:', jsonData.status);",
									"    ",
									"    // Log component health",
									"    if (jsonData.components) {",
									"        Object.keys(jsonData.components).forEach(component => {",
									"            console.log(`  ${component}: ${jsonData.components[component].status}`);",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/clusters/{{test_cluster_id}}/health",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"clusters",
								"{{test_cluster_id}}",
								"health"
							]
						},
						"description": "Check health status of cluster components"
					}
				},
				{
					"name": "Get Cluster Nodes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('‚úÖ Nodes list retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('‚úÖ Nodes array exists', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.nodes).to.be.an('array');",
									"    console.log(`üñ•Ô∏è  Found ${jsonData.nodes.length} nodes in cluster`);",
									"    ",
									"    // Log node details",
									"    jsonData.nodes.forEach((node, index) => {",
									"        if (index < 3) { // Log first 3 nodes",
									"            console.log(`  Node ${index + 1}: ${node.name || node.id} (${node.status || 'unknown'})`);",
									"        }",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/clusters/{{test_cluster_id}}/nodes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"clusters",
								"{{test_cluster_id}}",
								"nodes"
							]
						},
						"description": "List all nodes in the cluster"
					}
				},
				{
					"name": "Get Cluster Pods",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('‚úÖ Pods list retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('‚úÖ Pods array exists', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.pods).to.be.an('array');",
									"    console.log(`üê≥ Found ${jsonData.pods.length} pods in cluster`);",
									"    ",
									"    // Store a sample pod ID if available",
									"    if (jsonData.pods.length > 0 && jsonData.pods[0].id) {",
									"        pm.environment.set('sample_pod_id', jsonData.pods[0].id);",
									"        console.log('üìå Sample pod ID stored for testing:', jsonData.pods[0].id);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/clusters/{{test_cluster_id}}/pods",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"clusters",
								"{{test_cluster_id}}",
								"pods"
							]
						},
						"description": "List all pods in the cluster"
					}
				}
			]
		},
		{
			"name": "üìä Data Collection & Metrics",
			"description": "Metrics collection and data aggregation",
			"item": [
				{
					"name": "Start Metrics Collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('‚úÖ Metrics collection started', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('‚úÖ Collection status confirmed', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.exist;",
									"    console.log('üìä Metrics collection status:', jsonData.status);",
									"    ",
									"    if (jsonData.collector_id) {",
									"        pm.environment.set('collector_id', jsonData.collector_id);",
									"        console.log('üìå Collector ID stored:', jsonData.collector_id);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"cluster_id\": \"{{test_cluster_id}}\",\n  \"interval\": 30,\n  \"metrics\": [\"cpu\", \"memory\", \"network\", \"storage\"],\n  \"namespaces\": [\"default\", \"kube-system\"],\n  \"enable_predictions\": true,\n  \"retention_days\": 30\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/metrics/collect",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"metrics",
								"collect"
							]
						},
						"description": "Start collecting metrics from the specified cluster"
					}
				},
				{
					"name": "Get Resource Metrics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('‚úÖ Resource metrics retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('‚úÖ Metrics data structure is valid', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.metrics).to.exist;",
									"    console.log('üìä Retrieved metrics for cluster:', pm.environment.get('test_cluster_id'));",
									"    ",
									"    // Log available metric types",
									"    if (jsonData.metrics && typeof jsonData.metrics === 'object') {",
									"        const metricTypes = Object.keys(jsonData.metrics);",
									"        console.log('üìà Available metrics:', metricTypes.join(', '));",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/metrics/resources/{{test_cluster_id}}?start_time={{$isoTimestamp}}&end_time={{$isoTimestamp}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"metrics",
								"resources",
								"{{test_cluster_id}}"
							],
							"query": [
								{
									"key": "start_time",
									"value": "{{$isoTimestamp}}"
								},
								{
									"key": "end_time",
									"value": "{{$isoTimestamp}}"
								}
							]
						},
						"description": "Get current resource utilization metrics for the cluster"
					}
				},
				{
					"name": "Get CPU Metrics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('‚úÖ CPU metrics retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('‚úÖ CPU metrics data exists', function () {",