---
# Horizontal Pod Autoscaler for Production Web Frontend
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: web-frontend-hpa
  namespace: upid-production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: web-frontend
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
---
# HPA for API Backend
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: api-backend-hpa
  namespace: upid-production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: api-backend
  minReplicas: 2
  maxReplicas: 8
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 75
---
# Load Generator - Creates CPU/Memory pressure for HPA testing
apiVersion: apps/v1
kind: Deployment
metadata:
  name: load-generator
  namespace: upid-production
  labels:
    app: load-generator
    tier: testing
    upid.io/temporary: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: load-generator
  template:
    metadata:
      labels:
        app: load-generator
        tier: testing
    spec:
      containers:
      - name: load-gen
        image: busybox
        command: ["sh", "-c"]
        args:
        - |
          echo "Load Generator started on $(hostname)"
          echo "Generating HTTP load to trigger HPA scaling..."
          
          # Install curl-like tools
          while true; do
            echo "Sending requests to web-frontend-svc..."
            
            # Simulate 100 concurrent requests
            for i in $(seq 1 100); do
              (
                # Try to connect to the service
                timeout 5 wget -q -O /dev/null http://web-frontend-svc.upid-production.svc.cluster.local/ 2>/dev/null || true
              ) &
            done
            
            echo "Generated 100 concurrent requests"
            sleep 30  # Wait 30 seconds between bursts
            
            # Occasional high load bursts
            if [ $((RANDOM % 4)) -eq 0 ]; then
              echo "BURST MODE: Generating high load..."
              for i in $(seq 1 500); do
                (
                  timeout 2 wget -q -O /dev/null http://web-frontend-svc.upid-production.svc.cluster.local/ 2>/dev/null || true
                  timeout 2 wget -q -O /dev/null http://api-backend-svc.upid-production.svc.cluster.local:8000/ 2>/dev/null || true
                ) &
              done
              sleep 60  # Burst for 1 minute
            fi
          done
        resources:
          requests:
            cpu: 100m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 128Mi
---
# Memory Pressure Generator
apiVersion: apps/v1
kind: Deployment
metadata:
  name: memory-pressure
  namespace: upid-development
  labels:
    app: memory-pressure
    tier: testing
    upid.io/temporary: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: memory-pressure
  template:
    metadata:
      labels:
        app: memory-pressure
        tier: testing
    spec:
      containers:
      - name: memory-eater
        image: python:3.9-slim
        command: ["python", "-c"]
        args:
        - |
          import time
          import random
          import gc
          
          print("Memory Pressure Generator started")
          
          data_store = []
          
          while True:
              # Gradually increase memory usage
              chunk_size = random.randint(1000, 10000)
              data_chunk = [random.random() for _ in range(chunk_size)]
              data_store.append(data_chunk)
              
              memory_mb = len(data_store) * chunk_size * 8 / (1024 * 1024)  # Rough estimate
              print(f"Allocated approximately {memory_mb:.1f} MB of memory")
              
              # Occasionally free some memory
              if len(data_store) > 50 and random.random() < 0.3:
                  freed = len(data_store) // 3
                  data_store = data_store[freed:]
                  gc.collect()
                  print(f"Freed memory, current chunks: {len(data_store)}")
              
              time.sleep(5)  # Gradual increase
        resources:
          requests:
            cpu: 50m
            memory: 256Mi
          limits:
            cpu: 100m
            memory: 2Gi  # Allow growth for demo
---
# CPU Stress Test
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cpu-stress
  namespace: upid-development
  labels:
    app: cpu-stress
    tier: testing
    upid.io/temporary: "true"
spec:
  replicas: 2
  selector:
    matchLabels:
      app: cpu-stress
  template:
    metadata:
      labels:
        app: cpu-stress
        tier: testing
    spec:
      containers:
      - name: stress
        image: polinux/stress
        command: ["stress"]
        args: 
        - "--cpu"
        - "2"
        - "--timeout" 
        - "3600s"  # Run for 1 hour
        - "--verbose"
        resources:
          requests:
            cpu: 100m
            memory: 64Mi
          limits:
            cpu: 1000m  # Allow high CPU usage
            memory: 128Mi